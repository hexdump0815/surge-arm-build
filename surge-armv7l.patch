--- CMakeLists.txt.org
+++ CMakeLists.txt
@@ -66,6 +66,7 @@ set(SURGE_COMMON_INCLUDES
     src/common/dsp
     src/common/thread
     src/common/vt_dsp
+    simde/simde
 )
 
 add_executable(surge-headless
@@ -120,7 +121,7 @@ endif()
 if (UNIX)
     target_compile_options(surge-headless
         PRIVATE
-            -msse2
+            -mfpu=vfpv3-d16 -mno-unaligned-access
             "-D_aligned_malloc(x,a)=malloc(x)"
             "-D_aligned_free(x)=free(x)"
     )
--- src/common/SurgeStorage.cpp.org
+++ src/common/SurgeStorage.cpp
@@ -187,11 +187,11 @@
        
        /*
        ** If local directory doesn't exists - we probably came here through an installer -
-       ** use /usr/share/Surge as our last guess
+       ** use /usr/local/share/Surge as our last guess
        */
        if (! fs::is_directory(datapath))
        {
-           datapath = "/usr/share/Surge/";
+           datapath = "/usr/local/share/Surge/";
        }
    }
    else
@@ -335,7 +335,7 @@
           << "your %LocalAppData% directory."
 #endif
 #if LINUX
-          << "/usr/share or ~/.local/share."
+          << "/usr/local/share or ~/.local/share."
 #endif
           << " Please install shared assets correctly and restart.";
       Surge::UserInteractions::promptError(oss.str(), "Unable to load windows.wt");
--- build-linux.sh.org
+++ build-linux.sh
@@ -239,8 +239,8 @@
     fi
 
     if [ ! -z "$option_vst3" ]; then
-	rm -vf $vst3_dest_path/Surge.vst3/Contents/x86_64-linux/$dest_plugin_name
-	rmdir -v $vst3_dest_path/Surge.vst3/Contents/x86_64-linux $vst3_dest_path/Surge.vst3/Contents $vst3_dest_path/Surge.vst3
+	rm -vf $vst3_dest_path/Surge.vst3/Contents/aarch64-linux/$dest_plugin_name
+	rmdir -v $vst3_dest_path/Surge.vst3/Contents/aarch64-linux $vst3_dest_path/Surge.vst3/Contents $vst3_dest_path/Surge.vst3
     fi
 
     if [ ! -z "$option_lv2" ]; then
@@ -327,11 +327,11 @@
     headless_dest_path="$HOME/bin"
     data_path="$HOME/.local/share/Surge"
 else
-    vst2_dest_path="/usr/lib/vst"
-    vst3_dest_path="/usr/lib/vst3"
-    lv2_dest_path="/usr/lib/lv2"
-    headless_dest_path="/usr/bin"
-    data_path="/usr/share/Surge"
+    vst2_dest_path="/usr/local/lib/lxvst"
+    vst3_dest_path="/usr/local/lib/vst3"
+    lv2_dest_path="/usr/local/lib/lv2"
+    headless_dest_path="/usr/local/bin"
+    data_path="/usr/local/share/Surge"
 fi
 
 case $1 in
--- scripts/linux/package-vst3.sh.org
+++ scripts/linux/package-vst3.sh
@@ -2,7 +2,7 @@
 
 OUTPUT_DIR=products
 
-if [ $config = "debug_x64" ]; then
+if [ $config = "debug_armv7l" ]; then
     BUNDLE_NAME="Surge-Debug.vst3"
 else
     BUNDLE_NAME="Surge.vst3"
@@ -17,9 +17,9 @@
 	rm -rf "$BUNDLE_DIR"
 fi
 
-VST_SO_DIR="$BUNDLE_DIR/Contents/x86_64-linux"
+VST_SO_DIR="$BUNDLE_DIR/Contents/armv7l-linux"
 mkdir -p "$VST_SO_DIR"
-if [ $config = debug_x64 ]; then
+if [ $config = debug_armv7l ]; then
     cp target/vst3/Debug/Surge-Debug.so "$VST_SO_DIR"
 else
     cp target/vst3/Release/Surge.so "$VST_SO_DIR"
--- src/common/util/FpuState.cpp.org
+++ src/common/util/FpuState.cpp
@@ -9,19 +9,19 @@ void FpuState::set()
 {
    bool fpuExceptions = false;
 
-   _old_SSE_state = _mm_getcsr();
-   if (fpuExceptions)
-   {
-      _mm_setcsr(((_old_SSE_state & ~_MM_MASK_MASK) | _SSE_Flags) | _MM_EXCEPT_MASK); // all on
-   }
-   else
-   {
-      _mm_setcsr((_old_SSE_state | _SSE_Flags) | _MM_MASK_MASK);
-   }
-   // FTZ/DAZ + ignore all exceptions (1 means ignored)
-
-   _MM_SET_ROUNDING_MODE(_MM_ROUND_NEAREST);
+//   _old_SSE_state = simde_mm_getcsr();
+//   if (fpuExceptions)
+//   {
+//      simde_mm_setcsr(((_old_SSE_state & ~_MM_MASK_MASK) | _SSE_Flags) | _MM_EXCEPT_MASK); // all on
+//   }
+//   else
+//   {
+//      simde_mm_setcsr((_old_SSE_state | _SSE_Flags) | _MM_MASK_MASK);
+//   }
+//   // FTZ/DAZ + ignore all exceptions (1 means ignored)
+//
+//   _MM_SET_ROUNDING_MODE(_MM_ROUND_NEAREST);
 }
 
 void FpuState::restore()
 {
--- src/linux/ConfigurationXml.S.org
+++ src/linux/ConfigurationXml.S
@@ -5,6 +5,6 @@ configurationXmlStart:
     .incbin "../../resources/data/configuration.xml"
 configurationXmlEnd:
     .global configurationXmlNullTerminator
-    .type configurationXmlNullTerminator, @object
+    .type configurationXmlNullTerminator, %object
 configurationXmlNullTerminator:
     .int 0
